openapi: 3.1.0
servers:
  - url: /api
info:
  version: 1.0.0
  title: Recipes
  description: An API to manage your favourite recipes
tags:
  - name: Recipe
    description: Everything about your recipes
  - name: User
    description: Everything related to the user
security:
  - cookieAuth: []
paths:
  /login:
    post:
      tags:
        - User
      security: []
      summary: Login a user
      operationId: login
      requestBody:
        description: Login a user with the provided credentials
        $ref: '#/components/requestBodies/Credentials'
      responses:
        '200':
          description: Successful operation
          $ref: '#/components/responses/AuthenticatedUser'
        default:
          $ref: '#/components/responses/Error'
  /register:
    post:
      tags:
        - User
      security: []
      summary: Register a new user
      operationId: register
      requestBody:
        description: The new user credentials
        $ref: '#/components/requestBodies/Credentials'
      responses:
        '200':
          description: Successful operation
          $ref: '#/components/responses/User'
        default:
          $ref: '#/components/responses/Error'
  /recipes:
    get:
      tags:
        - Recipe
      summary: Get all recipes
      operationId: getRecipes
      responses:
        '200':
          description: Successful operation
          $ref: '#/components/responses/RecipeList'
        default:
          $ref: '#/components/responses/Error'
    post:
      tags:
        - Recipe
      summary: Add a new recipe to the store
      operationId: addRecipe
      responses:
        '200':
          description: Successful operation
          $ref: '#/components/responses/Recipe'
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        description: Create a new recipe in the store
        $ref: '#/components/requestBodies/Recipe'
  '/recipes/{recipeId}':
    get:
      tags:
        - Recipe
      summary: Find a recipe by ID
      description: Returns a single recipe
      operationId: getRecipeById
      parameters:
        - name: recipeId
          in: path
          description: ID of the recipe to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          $ref: '#/components/responses/Recipe'
        default:
          $ref: '#/components/responses/Error'
    post:
      tags:
        - Recipe
      summary: Updates a recipe in the store
      description: ''
      operationId: updateRecipe
      parameters:
        - name: recipeId
          in: path
          description: ID of the recipe to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/Recipe'
      responses:
        '200':
          description: successful operation
          $ref: '#/components/responses/Recipe'
        default:
          $ref: '#/components/responses/Error'
    delete:
      tags:
        - Recipe
      summary: Deletes a recipe
      description: ''
      operationId: deleteRecipe
      parameters:
        - name: recipeId
          in: path
          description: Recipe ID to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        default:
          $ref: '#/components/responses/Error'
components:
  headers:
    Login:
      description: Sets the session for the logged in user
      schema:
        type: string
        example: SESSID=123; Path=/; HttpOnly
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: SESSID
  schemas:
    Credentials:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          examples:
            - Spaghetti Carbonara
        password:
          type: string
          examples:
            - Spaghetti Carbonara
    Error:
      type: object
      description: Represents an error
      properties:
        code:
          type: integer
          examples:
            - 1
        message:
          type: string
      required:
        - code
        - message
    RecipeStatus:
      type: string
      description: Recipe status in the store
      enum:
        - available
        - pending
        - sold
    WriteRecipe:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          examples:
            - Spaghetti Carbonara
    ReadRecipe:
      allOf:
        - $ref: '#/components/schemas/WriteRecipe'
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64
              examples:
                - 10
    ReadUser:
      type: object
      required:
        - id
        - email
      properties:
        id:
          type: integer
          format: int64
          examples:
            - 10
        email:
          type: string
          examples:
            - user@example.com
  requestBodies:
    Credentials:
      description: User credentials
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Credentials'
    Recipe:
      description: Recipe object that needs to be added to the store
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WriteRecipe'
  responses:
    Error:
      description: Something went wrong
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    AuthenticatedUser:
      description: User object returned as result
      headers:
        'Set-Cookie':
          $ref: '#/components/headers/Login'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadUser'
    RecipeList:
      description: Recipe object returned as result
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ReadRecipe'
    Recipe:
      description: Recipe object returned as result
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadRecipe'
    User:
      description: User object returned as result
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadUser'