// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: recipes.sql

package sqlite

import (
	"context"
	"strings"
)

const browseRecipes = `-- name: BrowseRecipes :many
SELECT id, name, servings, minutes, description, created_by, created_at
FROM recipes
`

func (q *Queries) BrowseRecipes(ctx context.Context) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, browseRecipes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Servings,
			&i.Minutes,
			&i.Description,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes (name, servings, minutes, description, created_by)
VALUES (?, ?, ?, ?, ?)
    RETURNING id, name, servings, minutes, description, created_by, created_at
`

type CreateRecipeParams struct {
	Name        string
	Servings    int64
	Minutes     int64
	Description string
	CreatedBy   int64
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, createRecipe,
		arg.Name,
		arg.Servings,
		arg.Minutes,
		arg.Description,
		arg.CreatedBy,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Servings,
		&i.Minutes,
		&i.Description,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRecipe = `-- name: DeleteRecipe :exec
DELETE
FROM recipes
WHERE id = ?
`

func (q *Queries) DeleteRecipe(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRecipe, id)
	return err
}

const getImagesForRecipes = `-- name: GetImagesForRecipes :many
SELECT url, recipe_id
FROM recipe_images
WHERE recipe_id IN (
    /*SLICE:recipe_ids*/?
    )
ORDER BY sort_order
`

type GetImagesForRecipesRow struct {
	Url      string
	RecipeID int64
}

func (q *Queries) GetImagesForRecipes(ctx context.Context, recipeIds []int64) ([]GetImagesForRecipesRow, error) {
	query := getImagesForRecipes
	var queryParams []interface{}
	if len(recipeIds) > 0 {
		for _, v := range recipeIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:recipe_ids*/?", strings.Repeat(",?", len(recipeIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:recipe_ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetImagesForRecipesRow
	for rows.Next() {
		var i GetImagesForRecipesRow
		if err := rows.Scan(&i.Url, &i.RecipeID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMealPlan = `-- name: GetMealPlan :many
SELECT meal_plan.id, meal_plan.date, meal_plan.user_id, meal_plan.recipe_id, meal_plan.sort_order,
       recipes.id, recipes.name, recipes.servings, recipes.minutes, recipes.description, recipes.created_by, recipes.created_at
FROM meal_plan
    INNER JOIN recipes ON meal_plan.recipe_id = recipes.id
WHERE user_id = ?
    AND meal_plan.date >= ?2
    AND meal_plan.date <= ?3
ORDER BY meal_plan.date, meal_plan.sort_order
`

type GetMealPlanParams struct {
	UserID    int64
	FromDate  string
	UntilDate string
}

type GetMealPlanRow struct {
	MealPlan MealPlan
	Recipe   Recipe
}

func (q *Queries) GetMealPlan(ctx context.Context, arg GetMealPlanParams) ([]GetMealPlanRow, error) {
	rows, err := q.db.QueryContext(ctx, getMealPlan, arg.UserID, arg.FromDate, arg.UntilDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMealPlanRow
	for rows.Next() {
		var i GetMealPlanRow
		if err := rows.Scan(
			&i.MealPlan.ID,
			&i.MealPlan.Date,
			&i.MealPlan.UserID,
			&i.MealPlan.RecipeID,
			&i.MealPlan.SortOrder,
			&i.Recipe.ID,
			&i.Recipe.Name,
			&i.Recipe.Servings,
			&i.Recipe.Minutes,
			&i.Recipe.Description,
			&i.Recipe.CreatedBy,
			&i.Recipe.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecipe = `-- name: GetRecipe :one
SELECT id, name, servings, minutes, description, created_by, created_at
FROM recipes
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetRecipe(ctx context.Context, id int64) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, getRecipe, id)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Servings,
		&i.Minutes,
		&i.Description,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const getTagsForRecipes = `-- name: GetTagsForRecipes :many
SELECT tags.id, tags.name, recipe_tags.recipe_id
FROM tags
     INNER JOIN recipe_tags ON tags.id = recipe_tags.tag_id
WHERE recipe_tags.recipe_id IN (
    /*SLICE:recipe_ids*/?
)
ORDER BY tags.name
`

type GetTagsForRecipesRow struct {
	ID       int64
	Name     string
	RecipeID int64
}

func (q *Queries) GetTagsForRecipes(ctx context.Context, recipeIds []int64) ([]GetTagsForRecipesRow, error) {
	query := getTagsForRecipes
	var queryParams []interface{}
	if len(recipeIds) > 0 {
		for _, v := range recipeIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:recipe_ids*/?", strings.Repeat(",?", len(recipeIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:recipe_ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTagsForRecipesRow
	for rows.Next() {
		var i GetTagsForRecipesRow
		if err := rows.Scan(&i.ID, &i.Name, &i.RecipeID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecipes = `-- name: ListRecipes :many
SELECT id, name, servings, minutes, description, created_by, created_at
FROM recipes
WHERE created_by = ?
ORDER BY name
`

func (q *Queries) ListRecipes(ctx context.Context, createdBy int64) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, listRecipes, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Servings,
			&i.Minutes,
			&i.Description,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRecipe = `-- name: UpdateRecipe :exec
UPDATE recipes
set name = ?
WHERE id = ?
RETURNING id, name, servings, minutes, description, created_by, created_at
`

type UpdateRecipeParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateRecipe(ctx context.Context, arg UpdateRecipeParams) error {
	_, err := q.db.ExecContext(ctx, updateRecipe, arg.Name, arg.ID)
	return err
}
