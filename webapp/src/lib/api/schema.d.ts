/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/browse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Browse public recipes */
        get: operations["browseRecipes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login a user */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout a user */
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a new user */
        post: operations["register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Confirm a user account after successful registration */
        post: operations["confirmUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Modify a user's password based on a reset token */
        post: operations["updatePassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/password/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset password for an existing user by email */
        post: operations["resetPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the profile of the logged in user */
        get: operations["getUserProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mealplan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get your meal plan */
        get: operations["getMealPlan"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all recipes */
        get: operations["getRecipes"];
        put?: never;
        /** Add a new recipe to the store */
        post: operations["addRecipe"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipes/{recipeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a recipe by ID
         * @description Returns a single recipe
         */
        get: operations["getRecipeById"];
        put?: never;
        /** Updates a recipe in the store */
        post: operations["updateRecipe"];
        /** Deletes a recipe */
        delete: operations["deleteRecipe"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipes/{recipeId}/vote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Vote on a recipe
         * @description Cast an upvote (1) or downvote (-1) on a recipe
         */
        post: operations["addVote"];
        /**
         * Remove vote from a recipe
         * @description Remove your vote from a recipe
         */
        delete: operations["removeVote"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ingredients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all ingredients */
        get: operations["getIngredients"];
        put?: never;
        /** Add a new ingredient */
        post: operations["addIngredient"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ingredients/{ingredientId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update an ingredient */
        put: operations["updateIngredient"];
        post?: never;
        /** Delete an ingredient */
        delete: operations["deleteIngredient"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/units": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all units */
        get: operations["getUnits"];
        put?: never;
        /** Add a new unit */
        post: operations["addUnit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/units/{unitId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update a unit */
        put: operations["updateUnit"];
        post?: never;
        /** Delete a unit */
        delete: operations["deleteUnit"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all tags */
        get: operations["getTags"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Credentials: {
            /** @example test@example.com */
            email: string;
            /** @example Spaghetti Carbonara */
            password: string;
        };
        /** @description Represents an error */
        Error: {
            message: string;
        };
        Ingredient: {
            /**
             * Format: int64
             * @example 10
             */
            id: number;
            /** @example Flour */
            name: string;
        };
        PasswordReset: components["schemas"]["Token"] & {
            /** @example my new password */
            password: string;
        };
        ReadMealPlan: {
            /**
             * @description When are these recipes planned
             * @example 2006-06-01
             */
            date: string;
            recipes?: components["schemas"]["ReadRecipe"][];
        };
        ReadRecipe: components["schemas"]["BaseRecipe"] & {
            /**
             * Format: int64
             * @example 10
             */
            id: number;
            steps: components["schemas"]["ReadRecipeStep"][];
            tags?: components["schemas"]["ReadTag"][];
            votes: components["schemas"]["RecipeVotes"];
        };
        ReadUnit: {
            /**
             * Format: int64
             * @example 10
             */
            id: number;
            /** @example Kilogram */
            name: string;
            /** @example kg */
            symbol: string | null;
        };
        ReadTag: {
            /**
             * Format: int64
             * @example 1
             */
            id: number;
            /** @example Vegetarian */
            name: string;
        };
        ReadUser: {
            /**
             * Format: int64
             * @example 10
             */
            id: number;
            /** @example user@example.com */
            email: string;
        };
        /**
         * @description Recipe status in the store
         * @enum {string}
         */
        RecipeStatus: "available" | "pending" | "sold";
        WriteRecipeStep: {
            ingredients?: components["schemas"]["WriteStepIngredient"][];
            /**
             * @description Textual instructions for this step
             * @example Put chicken into pan and cook on medium heat.
             */
            instructions: string;
        };
        ReadRecipeStep: {
            /**
             * Format: int64
             * @example 10
             */
            id: number;
            ingredients?: components["schemas"]["ReadStepIngredient"][];
            /**
             * @description Textual instructions for this step
             * @example Put chicken into pan and cook on medium heat.
             */
            instructions: string;
        };
        WriteStepIngredient: {
            /**
             * Format: int64
             * @example 3
             */
            ingredientId: number;
            /**
             * Format: int64
             * @example 4
             */
            unitId: number;
            /**
             * Format: float64
             * @example 3.5
             */
            amount: number;
        };
        ReadStepIngredient: {
            ingredient: components["schemas"]["Ingredient"];
            unit: components["schemas"]["ReadUnit"];
            /**
             * Format: float64
             * @example 3.5
             */
            amount: number;
        };
        Token: {
            /** @example abd87ec862b6b8ecc2cf45c170d887d21e835a35f8537ea35ff1af102faa5920 */
            token: string;
        };
        BaseRecipe: {
            /** @example Spaghetti Carbonara */
            name: string;
            /**
             * @description The HTML description of the recipe
             * @example <p>My tasty spaghetti recipe</p>
             */
            description: string;
            /**
             * Format: int64
             * @description How many servings you'll get with this recipe
             * @example 4
             */
            servings: number;
            /**
             * Format: int64
             * @description How long it takes to prepare this recipe (in minutes)
             * @example 45
             */
            minutes: number;
            images?: string[];
        };
        WriteRecipe: components["schemas"]["BaseRecipe"] & {
            steps: components["schemas"]["WriteRecipeStep"][];
            tags?: number[];
        };
        Vote: {
            /**
             * Format: int64
             * @description Vote value (1 for upvote, -1 for downvote)
             * @example 1
             * @enum {integer}
             */
            vote: 1 | -1;
        };
        WriteIngredient: {
            /** @example Flour */
            name: string;
        };
        WriteUnit: {
            /** @example Kilogram */
            name: string;
            /** @example kg */
            symbol?: string | null;
        };
        RecipeVotes: {
            /**
             * Format: int64
             * @description Total vote score (upvotes minus downvotes)
             * @example 15
             */
            total: number;
            /**
             * Format: int64
             * @description Current user's vote on this recipe (1 for upvote, -1 for downvote, 0 if no vote)
             * @example 1
             * @enum {integer}
             */
            user: 1 | -1 | 0;
        };
    };
    responses: {
        /** @description Something went wrong */
        Error: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description User object returned as result */
        AuthenticatedUser: {
            headers: {
                "Set-Cookie": components["headers"]["SessionCookie"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ReadUser"];
            };
        };
        /** @description A list of ingredients */
        IngredientList: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Ingredient"][];
            };
        };
        /** @description A list of units */
        UnitList: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ReadUnit"][];
            };
        };
        /** @description A list of tags */
        TagList: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ReadTag"][];
            };
        };
        /** @description Meal plan for the user */
        MealPlan: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ReadMealPlan"][];
            };
        };
        /** @description Recipe object returned as result */
        RecipeList: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ReadRecipe"][];
            };
        };
        /** @description Recipe object returned as result */
        Recipe: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ReadRecipe"];
            };
        };
        /** @description User object returned as result */
        User: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ReadUser"];
            };
        };
        /** @description Recipe voting information */
        RecipeVotes: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["RecipeVotes"];
            };
        };
        /** @description Ingredient object returned as result */
        Ingredient: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Ingredient"];
            };
        };
        /** @description Unit object returned as result */
        Unit: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ReadUnit"];
            };
        };
    };
    parameters: never;
    requestBodies: {
        /** @description User credentials */
        Credentials: {
            content: {
                "application/json": components["schemas"]["Credentials"];
            };
        };
        /** @description Recipe object and related images */
        Recipe: {
            content: {
                "application/json": components["schemas"]["WriteRecipe"];
            };
        };
        /** @description The user's new password as well as the required reset token */
        PasswordReset: {
            content: {
                "application/json": components["schemas"]["PasswordReset"];
            };
        };
        /** @description The user's new password as well as the required reset token */
        ConfirmUser: {
            content: {
                "application/json": components["schemas"]["Token"];
            };
        };
        /** @description Vote on a recipe */
        Vote: {
            content: {
                "application/json": components["schemas"]["Vote"];
            };
        };
        /** @description Ingredient object to create or update */
        WriteIngredient: {
            content: {
                "application/json": components["schemas"]["WriteIngredient"];
            };
        };
        /** @description Unit object to create or update */
        WriteUnit: {
            content: {
                "application/json": components["schemas"]["WriteUnit"];
            };
        };
    };
    headers: {
        /** @description Sets the session for the logged in user */
        SessionCookie: string;
    };
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    browseRecipes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: components["responses"]["RecipeList"];
            default: components["responses"]["Error"];
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Login a user with the provided credentials */
        requestBody: components["requestBodies"]["Credentials"];
        responses: {
            /** @description Successful operation */
            200: components["responses"]["AuthenticatedUser"];
            default: components["responses"]["Error"];
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    "Set-Cookie": components["headers"]["SessionCookie"];
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["Error"];
        };
    };
    register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The new user credentials */
        requestBody: components["requestBodies"]["Credentials"];
        responses: {
            /** @description Registration was successful */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["Error"];
        };
    };
    confirmUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["ConfirmUser"];
        responses: {
            /** @description Successful operation */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["Error"];
        };
    };
    updatePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["PasswordReset"];
        responses: {
            /** @description Successful operation */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["Error"];
        };
    };
    resetPassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The user's email */
        requestBody: {
            content: {
                "application/json": {
                    email: string;
                };
            };
        };
        responses: {
            /** @description Successful operation */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["Error"];
        };
    };
    getUserProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: components["responses"]["User"];
            default: components["responses"]["Error"];
        };
    };
    getMealPlan: {
        parameters: {
            query?: {
                /** @description From when to fetch the meal plan */
                from?: string;
                /** @description Until when to fetch the meal plan */
                until?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: components["responses"]["MealPlan"];
            default: components["responses"]["Error"];
        };
    };
    getRecipes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: components["responses"]["RecipeList"];
            default: components["responses"]["Error"];
        };
    };
    addRecipe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Create a new recipe in the store */
        requestBody: components["requestBodies"]["Recipe"];
        responses: {
            /** @description Successful operation */
            200: components["responses"]["Recipe"];
            default: components["responses"]["Error"];
        };
    };
    getRecipeById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the recipe to return */
                recipeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful operation */
            200: components["responses"]["Recipe"];
            default: components["responses"]["Error"];
        };
    };
    updateRecipe: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the recipe to update */
                recipeId: number;
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["Recipe"];
        responses: {
            /** @description successful operation */
            200: components["responses"]["Recipe"];
            default: components["responses"]["Error"];
        };
    };
    deleteRecipe: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Recipe ID to delete */
                recipeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["Error"];
        };
    };
    addVote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the recipe to vote on */
                recipeId: number;
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["Vote"];
        responses: {
            /** @description successful operation */
            200: components["responses"]["RecipeVotes"];
            default: components["responses"]["Error"];
        };
    };
    removeVote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the recipe to remove vote from */
                recipeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful operation */
            200: components["responses"]["RecipeVotes"];
            default: components["responses"]["Error"];
        };
    };
    getIngredients: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: components["responses"]["IngredientList"];
            default: components["responses"]["Error"];
        };
    };
    addIngredient: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["WriteIngredient"];
        responses: {
            /** @description Successful operation */
            200: components["responses"]["Ingredient"];
            default: components["responses"]["Error"];
        };
    };
    updateIngredient: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the ingredient to update */
                ingredientId: number;
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["WriteIngredient"];
        responses: {
            /** @description Successful operation */
            200: components["responses"]["Ingredient"];
            default: components["responses"]["Error"];
        };
    };
    deleteIngredient: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the ingredient to delete */
                ingredientId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["Error"];
        };
    };
    getUnits: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: components["responses"]["UnitList"];
            default: components["responses"]["Error"];
        };
    };
    addUnit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: components["requestBodies"]["WriteUnit"];
        responses: {
            /** @description Successful operation */
            200: components["responses"]["Unit"];
            default: components["responses"]["Error"];
        };
    };
    updateUnit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the unit to update */
                unitId: number;
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["WriteUnit"];
        responses: {
            /** @description Successful operation */
            200: components["responses"]["Unit"];
            default: components["responses"]["Error"];
        };
    };
    deleteUnit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the unit to delete */
                unitId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["Error"];
        };
    };
    getTags: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: components["responses"]["TagList"];
            default: components["responses"]["Error"];
        };
    };
}
